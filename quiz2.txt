// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.22;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";

contract Token is ERC20 {
    constructor(address recipient) ERC20("token", "MTK") {
        _mint(recipient, 10000 * 10**decimals());
    }
}

contract ERC20Auction {
    struct listing {
        address seller;
        IERC20 token;
        uint256 pricePerToken;
        uint256 remainingAmount;
    }
    listing[] public listings;

    event listingAdded (address add,uint amount ,IERC20 token);

    function ListTokens(
        IERC20 token,
        uint256 amount,
        uint256 pricePerToken
    ) public {
        require(amount > 0, "Add amount missing!");
        require(pricePerToken > 0, "Per token price can not be Zero");

        listing memory newListing = listing(
            msg.sender,
            token,
            pricePerToken,
            amount
        );

        listings.push(newListing);
        emit listingAdded(msg.sender,amount,token);
    }

    function buyTokens(uint256 listingID, uint256 amount) public payable {
        require(amount > 0, "Amount must be greater than zero");
        require(listings.length > listingID, "Invalid listing ID");

        listing storage selectedListing = listings[listingID];

        require(selectedListing.remainingAmount >= amount,"Not enough tokens available");

        uint256 totalPrice = amount * selectedListing.pricePerToken;
        require(msg.value >= totalPrice, "Not enough ETH sent");
        require(selectedListing.token.transferFrom(selectedListing.seller,msg.sender,amount),"Token transfer failed");
        selectedListing.remainingAmount -= amount;

    }

    function getListCount() public view returns(uint){
        return listings.length;
    }
}
